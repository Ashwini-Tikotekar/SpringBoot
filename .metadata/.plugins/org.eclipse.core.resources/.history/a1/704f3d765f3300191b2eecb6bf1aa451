package com.bridgelabz.Fundoonotes.service;

import java.util.Optional;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.bridgelabz.Fundoonotes.dao.UserDetailsRepoistory;
import com.bridgelabz.Fundoonotes.model.UserDetails;
import com.bridgelabz.Fundoonotes.utility.EmailUtility;
import com.bridgelabz.Fundoonotes.utility.TokenGenerator;

@Service
public class UserServiceImpl implements UserService{
@Autowired
 private UserDetailsRepoistory userdetailsrepoistory;


@Autowired
private TokenGenerator tokenGenerator;

@Autowired
private PasswordEncoder bcryptEncoder;
@Autowired
private EmailUtility emailUtilility;


@Override
public UserDetails register(UserDetails user,HttpServletRequest request) {
	 user.setPassword(bcryptEncoder.encode(user.getPassword()));
	 UserDetails exsistingUser=userdetailsrepoistory.save(user);
	 if(exsistingUser!=null)
     {
         //String PasswordResetLink =    tokenGenerator.generateUrl("/resetpassword/", exsistingUser, request, resp);
         String token = tokenGenerator.generateToken(String.valueOf(exsistingUser.getId()));
         StringBuffer requestUrl=request.getRequestURL();
         String url2=requestUrl.substring(0, requestUrl.lastIndexOf("/"))+token ;
         url2=url2+""+token;
         System.out.println(token);
         emailUtilility.sendEmail("ashwinitikotekar@gmail.com", "Password Reset Link Mail", "please click on this link to reset password "+requestUrl);
     }
     exsistingUser.setEmailId("");
//     return exsistingUser;
 
	 
	 
	return userdetailsrepoistory.save(user);
		
	}
	
	

@Transactional
public UserDetails activateUser(String token, HttpServletRequest request) {
       int id=tokenGenerator.VerifyToken(token);      
       Optional<UserDetails> optional=userdetailsrepoistory.findById(id);
       if(optional.isPresent())
       {
    	   UserDetails user=optional.get();
           user.setActivate_Status(true);
//           userDao.updateUser(token, user);
           return user;
       }
	return null;
   }



@Override
public Optional<UserDetails> getUserDetails(int id) {
	
	return userdetailsrepoistory.findById(id);
}

//@Override
//public UserDetails login(UserDetails user) {
//	return userdetailsrepoistory.findemailById(user);
//}


}
