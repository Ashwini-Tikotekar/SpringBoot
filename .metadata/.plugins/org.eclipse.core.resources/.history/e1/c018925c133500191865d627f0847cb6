package com.bridgelabz.Fundoonotes.utility;

import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;
import javax.validation.executable.ExecutableValidator;
import javax.validation.metadata.BeanDescriptor;

import org.springframework.validation.Errors;
import org.springframework.validation.ValidationUtils;

import com.bridgelabz.Fundoonotes.model.UserDetails;

public class Validation implements Validator{



	private static final String REGEX_NAME ="^[a-zA-Z]{3,20}$";
	private static final String REGEX_EMAIL_ID = "^[a-z0-9._%-]+@[a-z0-9.-]+\\.[a-z]{2,4}$";
	private static final String REGEX_PASSWORD = "^[a-zA-Z0-9]{3,8}$";
	private static final String REGEX_MOBILENUMBER = "^[0-9]{10}$";


	public boolean supports(Class<?> UserDetailsClass) {
		return UserDetails.class.equals(UserDetailsClass);
	}


	public void validate(Object target, Errors errors) {
		UserDetails user = (UserDetails) target;
		if(!(user.getName().matches(REGEX_NAME)))
		{
			System.out.println("name is wrong");
			errors.rejectValue("name", "symbolsPresent",new Object[]{"'name'"},"name can't be symbols");
		}
		if(!(user.getEmailId().matches(REGEX_EMAIL_ID)))
		{
			System.out.println("mailID is wrong");

			errors.rejectValue("emailId", "symbolsPresent",new Object[]{"'emailId'"},"emailId can't be symbols");
		}
		if(!(user.getPassword().matches(REGEX_PASSWORD)))
		{
			System.out.println("password is wrong");

			errors.rejectValue("password", "symbolsPresent",new Object[]{"'password'"},"password can't be symbols");
		}
		if(!(String.valueOf(user.getMobileNumber())).matches(REGEX_MOBILENUMBER))
		{
			System.out.println("mobile Num is wrong");

			errors.rejectValue("mobileNumber", "symbolsPresent",new Object[]{"'mobileNumber'"},"mobile number can't be symbols");
		}

		ValidationUtils.rejectIfEmpty(errors, "name", "name.required");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "password", "password.required");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "emailId","emailId.required");
		ValidationUtils.rejectIfEmptyOrWhitespace(errors, "mobileNumber","mobileNumber.required");
	}







}



